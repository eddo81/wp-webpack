<?php

namespace Presto\Setup;

use Presto\Config as Config;

/**
 * Class Enqueue_Scripts
 * @package presto
 * @author "eddo81 <eduardo_jonnerstig@live.com>"
 */

class Enqueue_Scripts extends Config
{

  /**
   * register default hooks and actions for WordPress
   * @return
   */
  public function __construct()
  {
    add_action('wp_enqueue_scripts', [$this, 'enqueue_theme_scripts'], 100);
  }

  /**
   * Returns an array of strings containing the relative URLs for all dynamically named static assets that has been generated by Webpack.
   *
   * Accepts the following parameters:  'js', 'css'
   * @param string $asset_type
   * @return array
   */
  protected function get_assets(string $asset_type)
  {
    if (!isset(self::$assets[$asset_type])) {
      throw new \Exception("Invalid argument <strong>'{$asset_type}'</strong> provided to method of class: <strong>'" . get_called_class() . "'</strong>. The following arguments are permittable: <strong> 'js', 'css'</strong>.");
    }

    return self::$assets[$asset_type];
  }

  /**
   * Enqueue theme scripts and styles
   */
  public function enqueue_theme_scripts()
  {
    foreach ($this->get_assets('css') as $asset_path) {
      wp_enqueue_style('', get_bloginfo('template_url') . $asset_path, false, null);
    }

    foreach ($this->get_assets('js') as $key => $asset_path) {
      wp_enqueue_script('script_' . $key, get_bloginfo('template_url') . $asset_path, ['jquery'], null, true);
    }
  }
}
