module.exports = ({class_name, package_name, author, text_domain, env, assets}) => {
  const arguments_list = Object.keys(assets).map(key => ` '${String(key)}'`);
  const template = `<?php

  /*
  |--------------------------------------------------------------------------
  | THIS FILE HAS BEEN AUTOMATICALLY GENERATED, DO NOT EDIT!
  |--------------------------------------------------------------------------
  */

  namespace App;

  /**
   * Class ${class_name}
   * @package ${package_name}
   * @author ${JSON.stringify(author)}
   */

  class ${class_name}
  {
    /** @var array */
    static $assets = [${Object.keys(assets).map(key => `\n\t\t${JSON.stringify(String(key))} => ${JSON.stringify(assets[key]) || []}`)}\n\t];

    /** @var array */
    static $environment = [\n\t\t"wp_debug" => ${env.debug},\n\t\t"wp_env" => ${env.mode}\n\t];

    /** @var string */
    static $text_domain = ${JSON.stringify(text_domain)};

    /**
     * Returns an associative array containing the current development mode.
     * @return array
     */
    public static function get_environment()
    {
      return self::environment;
    }

    /**
     * Returns an array of strings containing the relative URLs for all dynamically named static assets that has been generated by Webpack.
     *
     * Accepts the following parameters: ${arguments_list}
     * @param string $asset_type
     * @return array
     */
    public static function get_assets(string $asset_type)
    {
      if(!isset(self::$assets[$asset_type])) {
        throw new \\Exception("Invalid argument <strong>'{$asset_type}'</strong> provided to method of class: <strong>'" . get_called_class() . "'</strong>. The following arguments are permittable: <strong>${arguments_list}</strong>.");
      }

      return self::$assets[$asset_type];
    }
  }`;

  return template;
};

