<?php

namespace Presto\Setup;

use Presto\Config as Config;

/**
 * Class Enqueue_Scripts
 * @package presto
 * @author "eddo81 <eduardo_jonnerstig@live.com>"
 */

class Enqueue_Scripts extends Config
{

  /**
   * register default hooks and actions for WordPress
   * @return
   */
  public function __construct()
  {
    add_action('wp_enqueue_scripts', [$this, 'enqueue_theme_scripts'], 100);
  }

  /**
   * Returns an array of strings containing the relative URLs for all dynamically named static assets that has been generated by Webpack.
   *
   * @param string $asset_type
   * @return array
   */
  protected function get_assets(string $asset_type) : array
  {
    if (!isset(self::$assets[$asset_type])) {
      $args = join(', ', array_keys(self::$assets));
      throw new \Exception("Invalid argument <strong>'{$asset_type}'</strong> provided to method of class: <strong>'" . get_called_class() . "'</strong>. The following arguments are permittable: <strong> {$args}</strong>.");
    }

    return self::$assets[$asset_type];
  }

  /**
   * Preload assets
   */
  // public function preload_theme_assets()
  // {
  //   foreach (self::$assets as $asset_type => $asset_urls) {

  //     foreach ($asset_urls as $href) {
  //       $href = get_bloginfo('template_url') . $href;
  //       echo "<link rel='preload' href='{$href}' as='{$asset_type}'>";
  //     }
  //   }
  // }

  /**
   * Enqueue theme scripts and styles
   */
  public function enqueue_theme_scripts()
  {
    foreach ($this->get_assets('style') as $asset) {
      wp_enqueue_style(hash('md5', $asset), get_bloginfo('template_url') . $asset, false, null);
    }

    foreach ($this->get_assets('script') as $asset) {
      wp_enqueue_script(hash('md5', $asset), get_bloginfo('template_url') . $asset, ['jquery'], null, true);
    }
  }
}
