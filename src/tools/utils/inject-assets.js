const fs        = require('fs');
const _PATH     = require('path');
const _CONFIG   = require('../config');


function injectAssets(assetsByType) {
  const scripts = (assetsByType.js) ? assetsByType.js : [];
  const styles = (assetsByType.css) ? assetsByType.css : [];
  const template = `<?php

namespace App;

/**
 * Class Paragon
 * @package Paragon
 * @author Eduardo JÃ¶nnerstig
 */

class Paragon
{
  /** @var array */
  static $assets = [
    'js'  => ${JSON.stringify(scripts)},
    'css' => ${JSON.stringify(styles)}
  ];

  /** @var array */
  static $environment = [
    'debug' => ${JSON.stringify(_CONFIG.env.debug)},
    'mode' => ${_CONFIG.env.mode}
  ];

  private function generate_exception_message($provided_argument, $arguments_object) {
    $class_name = get_called_class();
    $arguments_list = implode(", ", array_map(function($key) { return "'{$key}'"; } ,array_keys($arguments_object)));
    return "Invalid argument <strong>'{$provided_argument}'</strong> provided to method of class: <strong>'{$class_name}'</strong>. The following arguments are permittable: <strong>{$arguments_list}</strong>.";
  }

  /**
   * Provides a boolean value indicating the current development mode.
   */
  public static function get_environment($environment_key)
  {
    if(!isset(self::$environment[$environment_key])) {
      throw new \\Exception(self::generate_exception_message($environment_key, self::$environment));
    }
    return self::$environment[$environment_key];
  }

  /**
   * Provides an associative array containing the correct URLs for all dynamically named static assets that has been generated by Webpack.
   */
  public static function get_assets($asset_type)
  {
    if(!isset(self::$assets[$asset_type])) {
      throw new \\Exception(self::generate_exception_message($asset_type, self::$assets));
    }
    return self::$assets[$asset_type];
  }
}`;

  fs.writeFile(_CONFIG.directories.output.classes + _CONFIG.filenames.output.php, template, (error) => {
    if (error) {
      throw error;
    }
  });
}

module.exports = injectAssets;
